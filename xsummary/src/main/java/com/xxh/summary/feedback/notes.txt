考虑点
1.日志停止
2.日志路径
3.日志文件的删除
4.多次调用
5.全局捕获
6.回调
==========================
使用前台Service上传日志

优化：
1.后台服务，JobService或者WorkManager
2.日志的收集与停止不要依赖于Service或线程,依赖于协程。因为Service和线程的创建销毁代价高昂。
3.夜间模式适配：系统和JS

Android版本的兼容性：例如Android6构建文件时空

==================
相关知识点
okhttp的使用
WebView设置
H5调用文件管理，图库，拍照
============================

参数配置
1.哪些必传参数，哪些是可选参数
2.尽量内部定义类型，外部传对应的类型，而不是直接传String等等
3.能获取的尽量直接获取

超时参数

=======================
1.构建WebView，而不是Activity，Activity外部定义（标题栏，夜间模式）

2.配置日志上传服务，考虑是否后台服务，JobService或者WorkManager

=====================================
1.appId 改为 包名
2.上传：参数vaid改为deviceid

===============================================
日志与记录对应？类似多线程的同步
问题：日志与记录是异步的，导致不能一一对应（log先提交或者后提交的场景）
解决1：（展示时校验，适用，串行和并行的情况）
1.先按用户筛选记录，记录过滤未传日志。日志和记录按时间排序，按顺序对应。
2.增加匹配完成标识，防止反复匹配。性能耗费

解决2：（前提：是串行，不存在并行的情况）
1.日志与记录双向绑定
日志接口校验记录数据，完成标记
记录接口校验日志数据，完成标记
=======================
极限情况，超出单一时间，日志与记录提交的状态不一致
例如：
1、日志上传了，超出单元时间，用户未提交，点击取消日志或者不提交数据，产生一条废日志文件，导致后续匹配有问题
1、日志上传了，超出单元时间，用户未提交，点击取消又选中日志，多产生一条日志文件，导致后续匹配有问题

解决：
1.设置日志的有效时间为一个单元时间，超出定义为垃圾数据。
2.对于垃圾数据（在几个单元时间内）后续尝试校验处理
================================

封装遇到问题点
1.WebView的封装
2.H5调用文件管理，图库，拍照回调的封装
3.WebView后退的封装
4.夜间模式，标题样式

============================
接入注意点
1.配置service和前台服务权限
2.获取FeedbackView传入必须时AppCompatActivity
3.deviceId，darkModel，debug参数的设置

